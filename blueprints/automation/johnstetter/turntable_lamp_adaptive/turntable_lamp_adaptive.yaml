blueprint:
  name: Turntable Lamp Automation with Adaptive Lighting & Notification
  description: >
    Fades in a lamp to the right color and brightness when your record player
    starts, turns it off when it stops, and notifies you if you leave the
    turntable running too long.
  domain: automation
  input:
    power_sensor:
      name: Power Consumption Sensor
      description: Sensor measuring the record player’s power (in watts)
      selector:
        entity:
          domain: sensor
    lamp:
      name: Lamp to Control
      description: Light to turn on/off (should support color_temp & brightness)
      selector:
        entity:
          domain: light
    voice_player:
      name: Media Player for Announcements
      description: Media player for voice alerts (e.g., Home Assistant Voice speaker)
      selector:
        entity:
          domain: media_player
    on_threshold:
      name: "ON: Power threshold (W)"
      description: Watts above which the lamp turns on
      default: 3
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: W
    off_threshold:
      name: "OFF: Power threshold (W)"
      description: Watts below which the lamp turns off
      default: 2
      selector:
        number:
          min: 0
          max: 50
          step: 0.1
          unit_of_measurement: W
    time_fade_on:
      name: Fade-in duration (seconds)
      default: 4
      selector:
        number:
          min: 0
          max: 30
          step: 1
          unit_of_measurement: s
    time_fade_off:
      name: Fade-out duration (seconds)
      default: 3
      selector:
        number:
          min: 0
          max: 30
          step: 1
          unit_of_measurement: s
    timer_helper:
      name: Timer Helper for “Left Running” Alert
      description: >
        Create a timer helper (e.g., timer.record_player_running_too_long) and
        select it here.
      selector:
        entity:
          domain: timer
    running_too_long_minutes:
      name: Minutes before sending alert
      default: 75
      selector:
        number:
          min: 5
          max: 180
          step: 1
          unit_of_measurement: min
    red_brightness:
      name: Brightness for “left running” red alert
      default: 255
      selector:
        number:
          min: 1
          max: 255
          step: 1
    red_rgb:
      name: Red RGB Color
      default: [255, 50, 50]
      selector:
        color_rgb:
    red_duration:
      name: Duration to leave lamp red after alert (minutes)
      default: 10
      selector:
        number:
          min: 1
          max: 60
          step: 1

mode: restart

trigger:
  # Record starts
  - platform: numeric_state
    entity_id: !input power_sensor
    above: !input on_threshold
    for:
      seconds: 5

  # Record stops
  - platform: numeric_state
    entity_id: !input power_sensor
    below: !input off_threshold
    for:
      seconds: 10

  # Timer finished
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_helper

variables:
  hour: "{{ now().hour }}"
  # Fade-in/out durations
  transition_on: !input time_fade_on
  transition_off: !input time_fade_off

  # Adaptive brightness & color_temp (tweak if desired)
  brightness_final: >-
    {% if 6 <= hour < 11 %} 200
    {% elif 11 <= hour < 17 %} 180
    {% elif 17 <= hour < 23 %} 140
    {% else %} 80
    {% endif %}
  color_temp_final: >-
    {% if 6 <= hour < 11 %} 350
    {% elif 11 <= hour < 17 %} 400
    {% elif 17 <= hour < 23 %} 450
    {% else %} 500
    {% endif %}

action:
  - choose:
      # ---- Record starts (turn ON, adaptive, fade-in, start timer)
      - conditions:
          - condition: numeric_state
            entity_id: !input power_sensor
            above: !input on_threshold
        sequence:
          # Start or restart the timer for “left running” alert
          - service: timer.start
            target:
              entity_id: !input timer_helper
            data:
              duration:
                minutes: !input running_too_long_minutes

          # Fade in lamp to adaptive color temp & brightness
          - service: light.turn_on
            target:
              entity_id: !input lamp
            data:
              brightness: "{{ brightness_final }}"
              color_temp: "{{ color_temp_final }}"
              transition: "{{ transition_on }}"

      # ---- Record stops (turn OFF, cancel timer, fade-out)
      - conditions:
          - condition: numeric_state
            entity_id: !input power_sensor
            below: !input off_threshold
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_helper
          - service: light.turn_off
            target:
              entity_id: !input lamp
            data:
              transition: "{{ transition_off }}"

      # ---- Timer finished (lamp red, voice alert, auto-off)
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.event_type == 'timer.finished' }}"
        sequence:
          # Lamp RED
          - service: light.turn_on
            target:
              entity_id: !input lamp
            data:
              brightness: !input red_brightness
              rgb_color: !input red_rgb
              transition: 2
          # Announcement
          - service: tts.cloud_say
            data:
              entity_id: !input voice_player
              message: >
                Hey, your record has been spinning for over {{ states[inputs.running_too_long_minutes] }}
                minutes. Check if it's time to flip the record, or if you forgot the music is still
                rolling!
              cache: false
          # Wait and auto-off
          - delay:
              minutes: !input red_duration
          - service: light.turn_off
            target:
              entity_id: !input lamp
            data:
              transition: "{{ transition_off }}"

