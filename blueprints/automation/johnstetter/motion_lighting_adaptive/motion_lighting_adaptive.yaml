blueprint:
  name: Motion-Based Lighting v2.5 - DEBUG VERSION
  description: >
    v2.5 \u2013 Motion-based lighting with debug logging.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      selector:
        entity:
          domain: binary_sensor
    lights:
      name: Lights
      selector:
        entity:
          domain: light
          multiple: true
    switches:
      name: Switches (Optional)
      default: []
      selector:
        entity:
          domain: switch
          multiple: true
    initial_brightness:
      name: Default Initial Brightness
      default: 100
      selector:
        number:
          min: 10
          max: 100
          unit_of_measurement: percent
    override_initial_brightness:
      name: Override Initial Brightness (Optional)
      default: null
      selector:
        number:
          min: 10
          max: 100
          unit_of_measurement: percent
          mode: slider
    off_delay:
      name: Default Motion Inactivity Delay
      default: 300
      selector:
        number:
          min: 30
          max: 1800
          unit_of_measurement: seconds
    override_off_delay:
      name: Override Off Delay (Optional)
      default: null
      selector:
        number:
          min: 30
          max: 1800
          unit_of_measurement: seconds
    dimming_time:
      name: Dimming Time
      default: 60
      selector:
        number:
          min: 10
          max: 300
          unit_of_measurement: seconds
    dimming_brightness:
      name: Default Minimum Dimming Brightness
      default: 40
      selector:
        number:
          min: 10
          max: 80
          unit_of_measurement: percent
    override_dimming_brightness:
      name: Override Dimming Brightness (Optional)
      default: null
      selector:
        number:
          min: 10
          max: 80
          unit_of_measurement: percent
    bedtime:
      name: Bedtime
      default: "23:00:00"
      selector:
        time: {}
    daytime_mode:
      name: Allow Lights During Daytime (Cloudy Mode)
      default: true
      selector:
        boolean: {}

mode: restart

trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"

variables:
  lights: !input lights
  switches: !input switches
  initial_brightness: !input initial_brightness
  override_initial_brightness: !input override_initial_brightness
  off_delay: !input off_delay
  override_off_delay: !input override_off_delay
  dimming_brightness: !input dimming_brightness
  override_dimming_brightness: !input override_dimming_brightness
  dimming_time_input: !input dimming_time

  brightness_pct: >-
    {{ override_initial_brightness if override_initial_brightness is not none else initial_brightness }}
  off_delay_val: >-
    {{ override_off_delay if override_off_delay is not none else off_delay }}
  dimming_brightness_val: >-
    {{ override_dimming_brightness if override_dimming_brightness is not none else dimming_brightness }}
  dimming_time: >-
    {{ dimming_time_input }}

  # Check if all lights are off
  lights_were_off: >-
    {% set lights_list = lights if lights is iterable and lights is not string else [lights] %}
    {{ lights_list | map('states') | list | select('equalto', 'off') | list | count == lights_list | count }}

condition:
  - condition: or
    conditions:
      - condition: sun
        after: sunset
      - condition: template
        value_template: "{{ !input daytime_mode }}"
  - condition: time
    before: !input bedtime

action:
  - service: system_log.write
    data:
      message: >
        DEBUG: motion triggered, lights={{ lights }}, lights_were_off={{ lights_were_off }},
        brightness_pct={{ brightness_pct }}, switches={{ switches }}
      level: info

  - variables:
      color_temp: >-
        {% set hour = now().hour %}
        {% if hour >= 22 %}
          2700
        {% elif hour >= 20 %}
          3000
        {% elif hour >= 18 %}
          4000
        {% else %}
          5000
        {% endif %}
  - service: light.turn_on
    target:
      entity_id: "{{ lights }}"
    data:
      brightness_pct: "{{ brightness_pct | int }}"
      color_temp: "{{ color_temp | int }}"
      transition: 2

  - choose:
      - conditions: "{{ switches|length > 0 }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ switches }}"

  - wait_for_trigger:
      - platform: state
        entity_id: !input motion_sensor
        to: "off"
        for:
          seconds: "{{ off_delay_val | int }}"

  - service: system_log.write
    data:
      message: >
        DEBUG: waiting complete, about to turn off lights={{ lights }} and switches={{ switches }}
      level: info

  - service: light.turn_off
    target:
      entity_id: "{{ lights }}"

  - choose:
      - conditions: "{{ switches|length > 0 }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ switches }}"
