blueprint:
  name: Motion-Based Lighting v2.5 - Adaptive & Configurable Brightness
  description: >
    v2.5 â€“ Motion-based lighting with adaptive color temp, smooth dimming,
    intelligent on/off logic, per-room overrides, and optional daytime mode.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      selector:
        entity:
          domain: binary_sensor

    lights:
      name: Lights
      selector:
        entity:
          domain: light
          multiple: true

    switches:
      name: Switches (Optional)
      default: []
      selector:
        entity:
          domain: switch
          multiple: true

    initial_brightness:
      name: Default Initial Brightness
      default: 100
      selector:
        number:
          min: 10
          max: 100
          unit_of_measurement: percent

    override_initial_brightness:
      name: Override Initial Brightness (Optional)
      default: null
      selector:
        number:
          min: 10
          max: 100
          unit_of_measurement: percent
          mode: slider

    off_delay:
      name: Default Motion Inactivity Delay
      default: 300
      selector:
        number:
          min: 30
          max: 1800
          unit_of_measurement: seconds

    override_off_delay:
      name: Override Off Delay (Optional)
      default: null
      selector:
        number:
          min: 30
          max: 1800
          unit_of_measurement: seconds

    dimming_time:
      name: Dimming Time
      default: 60
      selector:
        number:
          min: 10
          max: 300
          unit_of_measurement: seconds

    dimming_brightness:
      name: Default Minimum Dimming Brightness
      default: 40
      selector:
        number:
          min: 10
          max: 80
          unit_of_measurement: percent

    override_dimming_brightness:
      name: Override Dimming Brightness (Optional)
      default: null
      selector:
        number:
          min: 10
          max: 80
          unit_of_measurement: percent

    bedtime:
      name: Bedtime
      default: "23:00:00"
      selector:
        time: {}

    daytime_mode:
      name: Allow Lights During Daytime (Cloudy Mode)
      default: true
      selector:
        boolean: {}

mode: restart

trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"

variables:
  lights: !input lights
  switches: !input switches
  initial_brightness: !input initial_brightness
  override_initial_brightness: !input override_initial_brightness
  off_delay: !input off_delay
  override_off_delay: !input override_off_delay
  dimming_brightness: !input dimming_brightness
  override_dimming_brightness: !input override_dimming_brightness
  dimming_time_input: !input dimming_time

  lights_were_off: "{{ expand(lights) | map(attribute='state') | list | unique == ['off'] }}"
  brightness_pct: >
    {{ iif(override_initial_brightness != None, override_initial_brightness, initial_brightness) }}
  off_delay_val: >
    {{ iif(override_off_delay != None, override_off_delay, off_delay) }}
  dimming_brightness_val: >
    {{ iif(override_dimming_brightness != None, override_dimming_brightness, dimming_brightness) }}
  dimming_time: >
    {{ dimming_time_input }}

condition:
  - condition: or
    conditions:
      - condition: sun
        after: sunset
      - condition: template
        value_template: "{{ not daytime_mode == false }}"

  - condition: time
    before: !input bedtime

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ lights_were_off }}"
        sequence:
          - variables:
              color_temp: >-
                {% set hour = now().hour %}
                {% if hour >= 22 %}
                  2700
                {% elif hour >= 20 %}
                  3000
                {% elif hour >= 18 %}
                  4000
                {% else %}
                  5000
                {% endif %}
          - service: light.turn_on
            target:
              entity_id: "{{ lights }}"
            data:
              brightness_pct: "{{ brightness_pct | int }}"
              color_temp: "{{ color_temp | int }}"
              transition: 2
          - service: switch.turn_on
            target:
              entity_id: "{{ switches }}"

  - wait_for_trigger:
      - platform: state
        entity_id: !input motion_sensor
        to: "off"
        for:
          seconds: "{{ off_delay_val | int }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ lights_were_off }}"
        sequence:
          - repeat:
              sequence:
                - service: light.turn_on
                  target:
                    entity_id: "{{ lights }}"
                  data:
                    brightness_step_pct: -10
                - delay: "00:00:10"
              until:
                - condition: template
                  value_template: >
                    {% set b = state_attr(lights[0], 'brightness') %}
                    {{ b is number and b < (dimming_brightness_val * 2.55) }}
          - delay: "{{ dimming_time }}"
          - service: light.turn_off
            target:
              entity_id: "{{ lights }}"
          - service: switch.turn_off
            target:
              entity_id: "{{ switches }}"
